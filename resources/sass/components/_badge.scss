// -----------------------------------------------------------------------------
// This file contains badge ui component rules
// -----------------------------------------------------------------------------

@use '../abstracts/mixins' as mixins;
@use '../abstracts/functions' as functions;
@use '../base/fonts' as fonts;

// $variable = (states, background, text-color)

// $defaultBadge: ('default', functions.std_val(material_color, light_blue_100), functions.std_val(material_color, light_blue_700));

// $primaryBadge: ('primary', functions.std_val(std_color, primary_lighter), functions.std_val(std_color, primary_dark));

// $secondaryBadge: ('secondary', functions.std_val(std_color, secondary_lighter), functions.std_val(std_color, secondary_dark));

// $successBadge: ('success', functions.std_val(material_color, teal_100), functions.std_val(material_color, teal_700));

// $warningBadge: ('warning', functions.std_val(material_color, orange_100), functions.std_val(material_color, orange_700));

// $dangerBadge: ('danger', functions.std_val(material_color, red_100), functions.std_val(material_color, red_700));

// $infoBadge: ('info', functions.std_val(material_color, light_blue_100), functions.std_val(material_color, light_blue_700));

// $darkBadge: ('dark', functions.std_val(std_color, dark_25), functions.std_val(std_color, dark_75));

// $lightBadge: ('light', functions.std_val(std_color, light_25), functions.std_val(std_color, light_75));

// $transparentBadge: ('transparent', transparent, functions.std_val(std_color, dark_25));

// $linkBadge: ('link', transparent, functions.std_val(std_color, primary_dark));

// $badgeColorGroup: $defaultBadge, $primaryBadge, $successBadge, $dangerBadge, $warningBadge, $infoBadge, $darkBadge, $lightBadge, $transparentBadge, $linkBadge;

// @each $states, $background, $textColor in $badgeColorGroup {
// 	.badge-#{$states} {
// 		background: $background !important;
// 		color: $textColor !important;

// 		@if ($states == 'link') {
// 			display: block;
// 			&:hover {
// 				color: functions.std_val(std_color, primary_darker);
// 			}
// 		}
// 	}
// }

// .badge {
// 	@include fonts.use_font(body_medium_md);
// 	// @include font-type(SemiBold);
// 	// @include font_size(set(base, md));
// }

// .badge {
// 	text-transform: uppercase;
// 	font-weight: 600;
// 	padding: 4px 5px 2px;
// 	font-size: 12px;
// 	margin-top: 1px;
// 	background-color: #fec107;
// }
// .badge-xs {
// 	font-size: 9px;
// }
// .badge-sm,
// .badge-xs {
// 	-webkit-transform: translate(0, -2px);
// 	-ms-transform: translate(0, -2px);
// 	-o-transform: translate(0, -2px);
// 	transform: translate(0, -2px);
// }
// .badge-success {
// 	background-color: #00c292;
// }
// .badge-info {
// 	background-color: #03a9f3;
// }
// .badge-warning {
// 	background-color: #fec107;
// }
// .badge-danger {
// 	background-color: #fb9678;
// }
// .badge-purple {
// 	background-color: #9675ce;
// }
// .badge-red {
// 	background-color: #fb3a3a;
// }
// .badge-inverse {
// 	background-color: #4c5667;
// }

$badgeColorMapping:
	('primary', functions.std_val(std_color, alpha_primary_16), functions.std_val(std_color, primary_dark)),
	('secondary', functions.std_val(std_color, alpha_secondary_16), functions.std_val(std_color, secondary_dark)),
	('dark', functions.std_val(std_color, alpha_dark_16), functions.std_val(std_color, dark_75)),
	('light', functions.std_val(std_color, alpha_light_16), functions.std_val(std_color, dark_75)),
	('danger', functions.std_val(material_color, red_50), functions.std_val(material_color, red_700)),
	('info', functions.std_val(material_color, light_blue_50), functions.std_val(material_color, light_blue_700)),
	('warning', functions.std_val(material_color, orange_50), functions.std_val(material_color, orange_700)),
	('success', functions.std_val(material_color, teal_50), functions.std_val(material_color, teal_700)),
	('gray', functions.std_val(material_color, grey_50), functions.std_val(material_color, grey_700)),
	('blue-gray', functions.std_val(material_color, blue_grey_50), functions.std_val(material_color, blue_grey_700)),
	('disabled', functions.std_val(material_color, grey_50), functions.std_val(material_color, grey_700));

$badgeSizeMapping:
	('sm', 16px, 4px, 2px, 8px body_medium_sm), ('md', 20px, 8px, 2px, 8px, body_medium_sm), ('lg', 28px, 8px, 4px, 12px, body_medium_md),
	('xl', 32px, 8px, 4px, 16px, body_medium_md);

.badge {
	display: flex;
	align-items: center;
	width: max-content;
	gap: 4px;
	height: 20px;
	padding: 2px 8px;
	@include fonts.use_font(body_medium_sm);
	@each $variant, $bgColor, $textColor in $badgeColorMapping {
		&.badge-#{$variant} {
			background-color: unset;
			background: $bgColor;
			color: $textColor;
		}
	}
	@each $variant, $height, $gap, $px, $py, $fontSize in $badgeSizeMapping {
		&.badge-#{$variant} {
			gap: $gap;
			height: $height;
			padding: #{$px} #{$py};
			@include fonts.use_font(#{$fontSize});
		}
	}
	&.badge-presence {
	}
}
